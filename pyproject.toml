[tool.poetry]
name = "repl-nix-workspace" # 项目名称，来自你之前提供的信息
version = "0.1.0"          # 项目版本，来自你之前提供的信息
description = "A simple inventory management system." # 项目描述，可以按需修改
authors = ["Your Name <you@example.com>"]         # 作者信息，请修改为你的信息
readme = "README.md"       # 如果有 README 文件，可以指向它

# *** 核心设置 ***
# package-mode = false 告诉 Poetry 这是一个应用程序，不是一个要安装的库。
# 这样 Poetry 就不会尝试将项目本身安装到虚拟环境里，解决之前的安装错误。
package-mode = false

[tool.poetry.dependencies]
python = ">=3.11" # Python 版本要求，来自你之前提供的信息

# 项目运行时需要的依赖列表
email-validator = ">=2.2.0"
flask-login = ">=0.6.3"
flask = ">=3.1.1"
flask-sqlalchemy = ">=3.1.1"
gunicorn = ">=23.0.0" # 注意：psycopg2-binary 是 PostgreSQL 的适配器
# psycopg2-binary = ">=2.9.10" # 如果你确定不需要 PostgreSQL，并且只用 SQLite，可以移除这行
flask-wtf = ">=1.2.2"
sqlalchemy = ">=2.0.41"
werkzeug = ">=3.1.3"
wtforms = ">=3.2.1"

# 如果只用 SQLite，可以不安装 psycopg2-binary。
# 如果你的 Replit 项目最初用的是 PostgreSQL，这个依赖是需要的。
# 如果只打算本地用 SQLite，且Replit生成时也没用PostgreSQL，可以删除psycopg2-binary这一行。

#[tool.poetry.group.dev.dependencies] # 这是一个可选的开发依赖组，比如测试工具、格式化工具等
#pytest = "^7.0.0" # 示例：测试框架
#black = "^24.0.0" # 示例：代码格式化工具

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
