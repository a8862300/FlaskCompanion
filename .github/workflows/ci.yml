# 文件名: .github/workflows/ci.yml

name: Python CI/CD # 工作流的名称，在 GitHub Actions 界面显示

on:
  push:
    branches:
      - main
      - feature/flask-factory-pattern # 修改点1：让工作流在 'feature/flask-factory-pattern' 分支的 push 时也触发
  pull_request:
    branches:
      - main
      - feature/flask-factory-pattern # 修改点2：让工作流在针对 'feature/flask-factory-pattern' 分支的 PR 时也触发
  workflow_dispatch: # 修改点3：允许你从 GitHub Actions 界面手动触发此工作流

jobs:
  build-and-test: # 定义一个名为 'build-and-test' 的作业
    name: Build & Test on Python ${{ matrix.python-version }} # 作业在 UI 上的显示名称
    runs-on: ubuntu-latest # 在最新的 Ubuntu 虚拟机上运行此作业

    # 定义一个策略，允许在多个 Python 版本上运行相同的步骤
    strategy:
      matrix:
        python-version: ["3.11", "3.12"] # 我们将在 Python 3.11 和 3.12 上测试

    steps:
    - name: Checkout code # 步骤1: 检出 Git 仓库的代码
      uses: actions/checkout@v4 # 使用 GitHub 官方的 actions/checkout Action 来克隆仓库

    - name: Set up Python ${{ matrix.python-version }} # 步骤2: 设置指定的 Python 环境
      uses: actions/setup-python@v5 # 使用 GitHub 官方的 actions/setup-python Action 来配置 Python
      with:
        python-version: ${{ matrix.python-version }} # 使用矩阵中定义的 Python 版本
        cache: 'poetry' # 启用 Poetry 依赖的缓存，可以加快后续运行速度

    - name: Install Poetry # 步骤3: 安装 Poetry 包管理器
      uses: snok/install-poetry@v1 # **关键修改：使用专门的 Action 来安装 Poetry**
      # with:
      #   version: 1.8.2 # 建议指定一个具体的 Poetry 版本，例如 1.8.2 或 1.7.0。
                         # 如果你想要最新稳定版，可以注释掉这一行或不写。
                         # 例如，你可以在这里明确写 version: 1.8.2 或者 1.x.x

    - name: Install dependencies with Poetry # 步骤4: 使用 Poetry 安装项目依赖
      run: poetry install --no-root

    - name: Run pre-commit checks # 步骤5: 运行 .pre-commit-config.yaml 中定义的各种代码质量检查
      run: poetry run pre-commit run --all-files

    - name: Run Pytest tests # 步骤6: 运行 Pytest 单元测试
      run: poetry run pytest
